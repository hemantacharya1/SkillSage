---
description: 
globs: 
alwaysApply: true
---
# ü§ñ AI Agent Master Rule File: AI-Powered Coding Interview Platform

**Version**: 1.0  
**Last Updated**: 2025-06-13

if stuck somewhere please ask and must not assume on your own and start coding always ask when stuck

---

## üìÅ Core Files to Follow

> You MUST reference the following documents throughout development:

- ‚úÖ `PRD.md` ‚Äî Full Project Requirements & Feature Scope  
- ‚úÖ `Backend Rulebook.md` ‚Äî Architecture, structure, and tech rules for backend  
- ‚úÖ `Frontend Rulebook.md` ‚Äî UI/UX, design, and component rules for frontend  

üìå Never assume anything outside these unless explicitly allowed or clarified.

---

## üß† Agent Behavior Guidelines

### ‚úÖ Work Phase-by-Phase
- Follow tasks from `Todo-Phase-Plan.md` strictly in order.
- After completing a phase, **STOP** and wait for manual review/approval.
- Only after approval, mark the phase as ‚úÖ `Completed` and proceed.

### ‚úÖ Ask Before You Assume
- If uncertain about:
  - APIs
  - Field structures
  - Component logic
  - Flow of interview lifecycle
> You must pause and ask for clarification.

### ‚úÖ Honor All Constraints
- Only support 2 roles: `recruiter` and `candidate`.
- Use only: JavaScript, Python, and Java in the code editor.
- Use JWT (stored in `localStorage`) for auth; no refresh token logic.
- No chat, calendar, PDF export, CI/CD, or tagging in this version.
- Use Gemini API for AI feedback (expect Markdown, not JSON).

---

## ‚ùå Hallucination Blockers

You **MUST NOT** do the following:

| ‚ùå Don‚Äôt Do This                           | ‚úÖ Instead Do This                        |
|-------------------------------------------|-------------------------------------------|
| Create new endpoints not in PRD            | Only use `/api/...`, recruiter/candidate scoped |
| Add unlisted features (chat, audit logs)   | Ask if missing something                  |
| Assume real-time sync unless scoped        | Only use WebSockets for notes + timer     |
| Use unrelated libraries or design systems  | Follow CodeSignal-inspired UI via Tailwind |
| Auto-format or structure Gemini responses  | Parse as Markdown only                    |

---

## üßë‚Äçüíª Tech Stack Constraints

| Area        | Tech                        |
|-------------|-----------------------------|
| Frontend    | React + Vite + Tailwind v3  |
| Backend     | Spring Boot + PostgreSQL    |
| Realtime    | WebSocket (Spring + WS hook)|
| AI Feedback | Gemini API (Markdown output)|
| Auth        | JWT-based, stored in localStorage |
| Deployment  | Frontend ‚Üí Vercel/Netlify<br>Backend+DB ‚Üí EC2 via Docker Compose |

---

## üîê Data Handling & Flow

- Interview flow: `Scheduled ‚Üí In Progress ‚Üí Completed ‚Üí Feedback Sent`
- Interviews auto-lock after timeout
- Recruiter triggers feedback manually
- AI feedback and submissions are saved in DB

---

## üì§ Communication & Logs

- Feedback must be manually reviewed before sending
- Email invite system is included, but **no calendar sync**
- Use plain SMTP or Spring email support

---

## üõë Stop Points

You must HALT at:

1. After each Phase in `Todo-Phase-Plan.md`
2. When you hit an unclear API or logic decision
3. Before integrating AI features if output format is ambiguous

---

## ‚úÖ Optional Features (only if time allows)
- Dark mode toggle
- Framer Motion transitions
- Markdown styling
- Monaco Editor enhancements

---

## Final Note

You are building an **AI-powered HackerRank/CodeSignal clone** ‚Äî optimize for:
- Simplicity
- Clarity
- Accuracy over cleverness

Always favor maintainable, readable code over complex abstractions.

---

**END OF RULE FILE**


ok